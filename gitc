#!/bin/bash
set -e

if [[ ! $GIT_CACHE_DIR ]]; then
  GIT_CACHE_DIR=$HOME/.git_cache
fi


# Helper functions.
# ----------------------------------------------------------------------------

function __gitc_initialize() {
  #                                      1 addr - full address
  #                                      | 2 prot - protocol, e.g. http://, git://, etc...
  #                                      | |                3 user - the user in user@git.drupal.org[...]
  #                                      | |                |            4 doma - domain, e.g. git.drupal.org
  #                                      | |                |            |              5 port - port number
  #                                      | |                |            |              |              6 path - path after domain
  #                                      | |                |            |              |              |              7 proj - project name
  #                                      | |                |            |              |              |              |
  local s=$(echo "~ $*"| sed -n 's|.*[ ]\(\([a-zA-Z]*://\)*\([^ ]*[@]\)*\([^ /:]*\)[:]*\([0-9]*\)*[/]*\([^ :]*[^ /]*/\([^ /]*\)\.git\)\).*|\1,\2,\3,\4,\5,\6,\7|p')
  local addr=$(echo $s | sed -n 's|\([^,]*\),.*|\1|p')
  local prot=$(echo $s | sed -n 's|\([^,]*,\)\{1\}\([^,]*\),.*|\2|p')
  local user=$(echo $s | sed -n 's|\([^,]*,\)\{2\}\([^,@]*\)[@]*,.*|\2|p')
  local doma=$(echo $s | sed -n 's|\([^,]*,\)\{3\}\([^,]*\),.*|\2|p')
  local port=$(echo $s | sed -n 's|\([^,]*,\)\{4\}\([^,]*\),.*|\2|p')
  local path=$(echo $s | sed -n 's|\([^,]*,\)\{5\}\([^,]*\),.*|\2|p')
  local proj=$(echo $s | sed -n 's|\([^,]*,\)\{6\}\([^,]*\)|\2|p')
  local repo=
  local cdir=
  local cwd=`pwd`

  if [[ $doma ]]; then
    repo=@$doma
    cdir=$GIT_CACHE_DIR/$repo
  else
    echo "Could not determine the url for the repository." && exit
  fi

  # Create cache directory for the domain and initialize if it doesn't exist.
  if [[ ! -d  $cdir ]]; then
    mkdir $cdir && cd $cdir
    git init --bare
    # Remove the initialized repo on failure.
    # 1/SIGHUP, 2/SIGINT, 3/SIGQUIT, 15/SIGTERM, ERR
    trap "rm -Rf $cdir && cd $cwd" 1 2 3 15 ERR
  else
    cd $cdir
  fi

  # If the remote doesn't exist locally, then initialize.
  if [[ ! $( git remote | sed -n "/^${proj}$/p" ) ]]; then
    # Create a temporary directory.
    if [[ -d $TMPDIR ]]; then
      TEMPDIR=`mktemp -d -t $proj`
    else
      TEMPDIR=`mktemp -d`
    fi
    trap "rm -Rf $TEMPDIR && cd $cwd" EXIT

    # Add default configuration for the project.
    # Do not download tags due to the overlaps across projects.
    git config --add remote.$proj.tagopt --no-tags
    git config --add gc.pruneexpire never

    # Clone project and use as a remote in the reference cache.
    echo "Initializing clone of $proj from $repo..."
    git clone --bare $addr $TEMPDIR
    git remote add $proj $TEMPDIR

    # Update with temporary local remote then point remote URL externally.
    # Secondary fetch registers external remote in FETCH_HEAD.
    echo "Creating cache: $repo >> $proj..."
    git remote update $proj
    git remote set-url $proj $addr
    git fetch $proj
  fi

  cd $cwd

  git config --replace-all git-cached.project $proj
  git config --replace-all git-cached.repository $repo
  git config --replace-all git-cached.cache-dir $cdir
}

function __gitc_alternates() {
  echo "`git rev-parse --show-toplevel`/.git/objects/info/alternates"
}

function __gitc_is_cached() {
  __gitc_cache_dir
}

function __gitc_cache_dir() {
  git config -z --get git-cached.cache-dir 2> /dev/null
}

function __gitc_project() {
  git config -z --get git-cached.project 2> /dev/null
}

# Callback functions.
# ----------------------------------------------------------------------------

function _gitc_fetch() {
  local cwd=`pwd`
  local cdir=`__gitc_cache_dir`
  local proj=`__gitc_project`

  if [[ -d $cdir && -n $proj ]]; then
    cd $cdir
    echo "Fetching cache..." && git fetch $proj
    cd $cwd
  fi
  git "$@"
}

function _gitc_pull() {
  _gitc_fetch "$@"
}

function _gitc_clone() {
  __gitc_initialize "$@"

  local cdir=`__gitc_cache_dir`

  git "$@" --reference $cdir
}

function _gitc_cache_attach() {
  [[ -n `__gitc_is_cached` ]] && echo "Already attached." && exit

  __gitc_initialize `git config --get remote.origin.url`

  local cdir=`__gitc_cache_dir`
  local alts=`__gitc_alternates`

  # Point to cached object dir inside the alternates file.
  echo $cdir/objects >> $alts
  echo "Taking out the garbage..." && git gc
}

function _gitc_cache_detach() {
  [[ -z `__gitc_is_cached` ]] && echo "Nothing to detach." && exit

  local cdir=`__gitc_cache_dir`
  local alts=`__gitc_alternates`

  echo "Repacking..." && git repack -a -d -l
  # Remove object pointer. An 'alternates.bak' will be created.
  sed -i.bak "s|^$cdir/objects$||" $alts
  git config -z --remove-section git-cached 2> /dev/null
}

function _gitc_cache_repair() {
  echo "Repairing..." && _gitc_cache_detach && _gitc_cache_attach
}

function _gitc_cache() {
  local cwd=`pwd`
  local cdir=$GIT_CACHE_DIR/$2
  if [[ -d $cdir ]]; then
    shift 2 && cd $cdir && git "$@" && cd $cwd
  else
    echo "$2 does not exist."
  fi
}

# Callback
# ----------------------------------------------------------------------------
# Detect callback function and fallback to git if it doesn't exist.
__callback="_gitc_${1//-/_}"
[[ `declare -Ff $__callback` ]] && $__callback "$@" || git "$@"
